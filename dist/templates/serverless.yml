service: 
  name: {service-name}

frameworkVersion: ">=1.0.0 <2.0.0"

provider: 
  name: aws
  runtime: nodejs10.x
  memorySize: 512 # Overwrite the default memory size. Default is 1024.
  timeout: 30 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds.
  region: ${opt:region, 'us-east-2'} # Overwrite the default region used. Default is us-east-2
  stage: ${opt:stage, 'development'} # Set the default stage used. Default is development.
  stackName: ${self:service.name}-stack # Use a custom name for the CloudFormation stack
  apiName: ${self:service.name}-api # Use a custom name for the API Gateway API
  endpointType: regional # Optional endpoint configuration for API Gateway REST API. Default is Edge.
  deploymentBucket:
    name: {application-name}.serverless.${self:provider.stage}.${self:provider.region}.deploys # Deployment bucket name. Default is generated by the framework.
    serverSideEncryption: AES256 # when using server-side encryption.
    tags: # Tags that will be added to each of the deployment resources
      Application: {application-name}
  deploymentPrefix: serverless # The S3 prefix under which deployed artifacts should be stored. Default is serverless
  apiKeySourceType: HEADER # Source of API key for usage plan. HEADER or AUTHORIZER.

# Add the serverless-webpack plugin.
plugins:
  - serverless-webpack
  
# Custom serverless variables.
custom:
  iam-resources: ${file(./resources/iam-resources.yml)}

# The "Resources" your "Functions" use.  Raw AWS CloudFormation goes in here.
resources: 
  Resources: 
    IAM: ${self:custom.iam-resources.roles-and-policies}

functions:  
  main: # Function name.
    handler: src/index.handler # The file and module for this specific function.
    name: ${self:service.name}-${self:provider.stage}-lambda # optional, Deployed Lambda name.
    description: Created with lambda manager # The description of your function.
    role: IAM # IAM role which will be used for this function.
    events: # The Events that trigger this Function.
      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.
          path: ${self:service.name}/message # Path for this endpoint.
          method: get # HTTP method for this endpoint.
          cors: true # Turn on CORS for this endpoint.
          private: false # Requires clients to add API keys values in the `x-api-key` header of their request.
    environment:
      STAGE: ${opt:stage, 'development'}
    tags: # Function specific tags
      Application: {application-name}
    package:
      exclude: # Specify the directories and files which should be excluded in the deployment package for this specific function.
        - .git/**
        - resources/**
